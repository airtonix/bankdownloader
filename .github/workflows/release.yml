name: ReleaseManagement

on:
  push:
    branches:
      - master

permissions:
  contents: write
  pull-requests: write
  packages: write


jobs:
  Release:
    runs-on: ubuntu-22.04

    outputs:
      release_created: ${{ steps.release.outputs.release_created }}
      releases_created: ${{ steps.release.outputs.releases_created }}
      tag_name: ${{ steps.release.outputs.tag_name }} # e.g. v1.0.0
      version: ${{ steps.release.outputs.version }} # e.g. 1.0.0
      json: ${{ toJSON(steps.release.outputs) }}

    steps:
      - name: CreateOrUpdateRelease
        uses: google-github-actions/release-please-action@v3
        if: !github.event.act
        id: release-please
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          command: manifest
          release-type: go
          extra-files: |
            meta/package.go
      
      # this exists so we can faceroll this workflow locally with nekos/act
      # remember that you need to:
      # - have devbox installed
      # - run `devbox shell` to get all the tooling installed
      # - then you can run: `just test_ci_build`
      - name: ReleasePleaseOrActInterop
        id: release
        run: |
          if [ "${{!github.event.act}}" == "false" ]; then
            echo "release_created=true" >> $GITHUB_OUTPUT
            echo "releases_created=true" >> $GITHUB_OUTPUT
            echo "tag_name=snapshot" >> $GITHUB_OUTPUT
            echo "version=snaphot" >> $GITHUB_OUTPUT
          else
            echo "release_created=${{ steps.release-please.outputs.release_created }}" >> $GITHUB_OUTPUT
            echo "releases_created=${{ steps.release-please.outputs.releases_created }}" >> $GITHUB_OUTPUT
            echo "tag_name=${{ steps.release-please.outputs.tag_name }}" >> $GITHUB_OUTPUT
            echo "version=${{ steps.release-please.outputs.version }}" >> $GITHUB_OUTPUT
          fi

  PrTitle:
    # dont run this locally, we can simulate it with nekos/act
    if: ${{ !needs.Release.outputs.releases_created && !github.event.act }}

    runs-on: ubuntu-22.04
    
    permissions:
      statuses: write

    steps:
      - uses: aslafy-z/conventional-pr-title-action@v3
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  Preview:
    if: !needs.Release.outputs.releases_created

    runs-on: ubuntu-22.04
    needs: [Release]

    steps:

      - name: Checkout
        uses: actions/checkout@v3

      - name: Install nix
        uses: DeterminateSystems/nix-installer-action@v4
        with:
          logger: pretty
          planner: linux
          extra-conf: experimental-features = ca-derivations fetch-closure
          init: 'none'

      - name: Install devbox
        uses: jetpack-io/devbox-install-action@v0.7.0
        env:
          DEVBOX_DEBUG: 1
        with:
          skip-nix-installation: 'true'

      - name: Install Problem Matcher
        run: |
          echo "::add-matcher::./.github/problem-matcher.json"

      - name: Lint
        run: devbox run -- just lint

      - name: Test
        run: devbox run -- just test

      - name: Convert coverage to lcov
        uses: jandelgado/gcov2lcov-action@v1
        with:
          infile: coverage.txt
          outfile: coverage.lcov

      - name: Coveralls
        uses: coverallsapp/github-action@v1.1.2
        with:
          github-token: ${{ secrets.github_token }}
          path-to-lcov: coverage.lcov

      - name: Remove Problem Matcher
        run: |
          echo "::remove-matcher owner=go::"

      - name: Build  
        run: devbox run -- just build
      
      # dont run this locally, we can't simulate it with nekos/act
      - name: Upload Artifacts
        if: !github.event.act 
        uses: actions/upload-artifact@v3
        with:
          path: |
            dist/**/*
            !dist/**/*.json
            !dist/**/*.yaml

      # dont run this locally, we can't simulate it with nekos/act
      - name: Link Artifacts
        if: !github.event.act 
        uses: montogeek/github-action-comment-artifacts@1.0
      
  Publish:
    if: ${{ !needs.Release.outputs.releases_created }}

    runs-on: ubuntu-22.04
    needs: [Release]

    env:
      REGISTRY: ghcr.io
      IMAGE_NAME: ${{ github.repository }}

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          fetch-tags: true
      
      - name: Setup QEMU
        uses: docker/setup-qemu-action@v2

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Docker Login
        uses: docker/login-action@65b78e6e13532edd9afa3aa52ac7964289d1a9c1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
    
      - name: Install nix
        uses: DeterminateSystems/nix-installer-action@v4
        with:
          logger: pretty
          planner: linux
          extra-conf: experimental-features = ca-derivations fetch-closure
          init: 'none'

      - name: Install devbox
        uses: jetpack-io/devbox-install-action@v0.7.0
        env:
          DEVBOX_DEBUG: 1
        with:
          skip-nix-installation: 'true'
          
      - name: Run GoReleaser
        env:
          registry: ${{ env.REGISTRY }}
          IMAGE_NAME: ${{ env.IMAGE_NAME }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          if [ "${{ !github.event.act }}" == "true" ]; then
            devbox run -- just publish
          else
            devbox run -- just build
          fi
